---
alwaysApply: true
description: Bonnes pratiques de d√©veloppement pour ce projet
---

# üõ†Ô∏è Bonnes Pratiques de D√©veloppement

## üìã **Conventions de Code**

### TypeScript Strict
- Toujours typer les interfaces dans [types.ts](mdc:types.ts)
- Utiliser les enums pour les constantes (`MessageSender`, `AppMode`)
- Interfaces explicites pour les props de composants

### React Patterns
```javascript
// ‚úÖ Hooks modernes avec cleanup
useEffect(() => {
  // setup
  return () => {
    // cleanup
  };
}, [dependencies]);

// ‚úÖ useRef pour √©l√©ments DOM et valeurs persistantes
const elementRef = useRef<HTMLElement>(null);
const valueRef = useRef<boolean>(false);
```

## üîß **Gestion d'√âtat Optimis√©e**

### √âtat Local vs Global
- `useState` pour √©tat composant local
- `useRef` pour valeurs ne n√©cessitant pas de re-render
- Pas de store global (Redux/Zustand) - Simplicit√© maintenue

### Memoization S√©lective
```javascript
const handleSomething = useCallback(() => {
  // logique m√©tier
}, [dependencies]);
```

## üåç **Variables d'Environnement**

### Configuration Vite
```javascript
// vite.config.ts
define: {
  'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
  'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
}
```

### S√©curit√©
- Cl√©s API JAMAIS dans le code source
- Utiliser `.env.local` pour d√©veloppement
- Variables publiques uniquement

## üéØ **Performance**

### Optimisations Appliqu√©es
- Lazy loading des composants si n√©cessaire
- Throttling/debouncing pour √©v√©nements fr√©quents
- Cleanup proper des listeners et timers

### Bundle Optimis√©
- Vite avec tree-shaking automatique
- Imports sp√©cifiques : `import { specific } from 'library'`
- Code splitting naturel avec dynamic imports

## üß™ **Debugging & Monitoring**

### Console Strategic
```javascript
// ‚ö†Ô∏è IMPORTANT : Ne pas supprimer certains console.log
console.log(newUtt); // Fixe les probl√®mes onend de Speech API
```

### Error Boundaries
Gestion d'erreurs gracieuse dans tous les services API.

## üì¶ **D√©ploiement**

### Scripts NPM
- `npm run dev` - D√©veloppement local
- `npm run build` - Production build  
- `npm run preview` - Preview build local

### Repository
- Git hooks propres
- Messages de commit descriptifs
- Branches feature si d√©veloppement collaboratif